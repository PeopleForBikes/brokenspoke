//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "city")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub country: String,
    pub state: String,
    pub uuid: Uuid,
    pub population: i32,
    pub ratings: f64,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bna::Entity")]
    Bna,
    #[sea_orm(has_many = "super::infrastructure::Entity")]
    Infrastructure,
    #[sea_orm(has_many = "super::community_survey::Entity")]
    CommunitySurvey,
}

impl Related<super::bna::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bna.def()
    }
}

impl Related<super::infrastructure::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Infrastructure.def()
    }
}

impl Related<super::community_survey::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommunitySurvey.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
