use super::{CsvExt, ScorecardExt};
use crate::{Dataset, Error, PFB_S3_PUBLIC_DOCUMENTS, PFB_S3_STORAGE_BASE_URL};
use serde::Deserialize;
use url::Url;

/// Represent a PeopleForBikes city.
#[derive(Debug, Deserialize, Clone)]
pub struct City23 {
    /// City name.
    pub city: String,
    /// Two letter code representing the state where the city is located.
    pub state: String,
    /// Full name of the state where the city is located.
    pub state_full: String,
    /// Country where the city is located.
    pub country: String,
    /// Region.`
    pub region: String,
    /// FIPS code.
    pub census_fips_code: u32,
    /// Latitude.
    pub census_latitude: f64,
    /// Longitude
    pub census_longitude: f64,
}

/// Represent the results from the BNA.
#[derive(Debug, Deserialize, Clone)]
pub struct BNA23 {
    /// Year of this analysis.
    pub year: u32,
    /// Population.
    pub census_population: u32,
    /// Residential speed limit.
    pub residential_speed_limit: u8,
    ///
    pub bna_id: String,
    /// BNA unique identifier.
    ///
    /// It is generated by a specific Bicyle Network Analysis (BNA) run and
    /// should be assimilated to a version number (each run will generate a
    /// new identifier).
    pub bna_uuid: String,
    /// How well people can reach other people by bike.
    pub bna_people: f64,
    /// How well people can reach jobs by bike.
    pub bna_opportunity_employment: f64,
    ///How well people can reach K-12 schools by bike.
    pub bna_opportunity_k12_education: f64,
    /// How well people can reach a technical vocational college by bike.
    pub bna_opportunity_technical_vocational_college: f64,
    /// How well people can reach university people by bike.
    pub bna_opportunity_higher_education: f64,
    /// How well people can reach employment and educational opportunities by bike.
    pub bna_opportunity: f64,
    /// How well people can reach doctors by bike.
    pub bna_core_services_doctors: f64,
    /// How well people can reach dentists by bike.
    pub bna_core_services_dentists: f64,
    /// How well people can reach hospitals by bike.
    pub bna_core_services_hospitals: f64,
    /// How well people can reach pharmacies by bike.
    pub bna_core_services_pharmacies: f64,
    /// How well people can reach grocery stores by bike.
    pub bna_core_services_grocery: f64,
    /// How well people can reach social services by bike.
    pub bna_core_services_social_services: f64,
    /// How well people can reach Core Services by bike.
    pub bna_core_services: f64,
    /// How well people can reach retail shopping by bike.
    pub bna_retail: f64,
    /// How well people can reach parks by bike.
    pub bna_recreation_parks: f64,
    /// How well people can reach trails by bike.
    pub bna_recreation_trails: f64,
    /// How well people can reach community centers by bike.
    pub bna_recreation_community_centers: f64,
    /// How well people can reach recreation opportunities by bike.
    pub bna_recreation: f64,
    /// How well people can reach major tansit hubs by bike.
    pub bna_transit: f64,
    /// City rating.
    pub bna_overall_score: f64,
    /// Rounded city rating.
    pub bna_rounded_score: u8,
    /// Miles of low stress infrstructure.
    pub bna_total_low_stress_miles: f64,
    /// Miles of high stress infrastructure.
    pub bna_total_high_stress_miles: f64,
    /// City size category based on the population.
    pub pop_size: Size,
    /// Ranking amongst all cities.
    pub rank: u32,
    /// Ranking by size.
    pub rank_size: u32,
    /// Ranking amongst cities in the same state.
    pub rank_state: u32,
    /// Ranking amongst cities in the same countries
    pub rank_country: u32,
    /// Ranking amongst cities of the same size category.
    pub rank_country_size: u32,
}

#[derive(Debug, Deserialize, Clone)]
#[serde(rename_all = "lowercase")]
pub enum Size {
    /// Represent small cities.
    Small,
    /// Represent medium cities.
    Medium,
    /// Represent large cities.
    Large,
}

#[derive(Debug, Deserialize, Clone)]
pub struct ScoreCard23 {
    /// City details.
    #[serde(flatten)]
    pub city: City23,
    /// BNA results.
    #[serde(flatten)]
    pub bna: BNA23,
}

impl CsvExt for ScoreCard23 {}

impl ScorecardExt for ScoreCard23 {
    /// Return the full name of the city.
    ///
    /// The full name has the following format: `{COUNTRY}-{STATE}-{CITY_NAME}`.
    fn full_name(&self) -> String {
        format!(
            "{}-{}-{}",
            self.city.country, self.city.state, self.city.city
        )
    }

    /// Return the URL of the specified dataset.
    fn url(&self, dataset: &Dataset) -> Result<Url, Error> {
        let mut dataset_url: String = String::new();
        if *dataset == Dataset::DataDictionary {
            dataset_url.push_str(PFB_S3_PUBLIC_DOCUMENTS);
        } else {
            dataset_url.push_str(PFB_S3_STORAGE_BASE_URL);
            dataset_url.push('/');
            dataset_url.push_str(&self.bna.bna_id);
        }
        dataset_url.push('/');
        dataset_url.push_str(&dataset.to_string());
        dataset_url.push('.');
        dataset_url.push_str(&dataset.extension());
        Ok(Url::parse(&dataset_url)?)
    }
}
