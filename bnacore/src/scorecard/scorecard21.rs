//! Manage City Rating Scorecards.
//!
//! This module contains the different structures used to compose a ScoreCard as
//! defined in the City Ratings.
//!
//! This module contains Python wrappers, generated by
//! [Py03](https://github.com/PyO3/PyO3). Some of these wrappers are just
//! aliases to other functions, but with a definition that makes them Python
//! compatible. For example, Python does not understand generics, or cannot use
//! slices `&[T]`. Refer to the
//! [Mapping of Rust types to Python types](https://pyo3.rs/v0.16.3/conversions/tables.html)
//! chapter of the Py03 book for more details.
use crate::{Dataset, Error, PFB_S3_PUBLIC_DOCUMENTS, PFB_S3_STORAGE_BASE_URL};
use pyo3::prelude::*;
use serde::Deserialize;
use url::Url;

use super::{CsvExt, ScorecardExt};

/// Represent a PeopleForBikes city.
#[pyclass]
#[derive(Debug, Deserialize, Clone)]
pub struct City21 {
    /// City name.
    #[pyo3(get, set)]
    #[serde(rename = "City")]
    pub name: String,
    /// Country where the city is located.
    #[pyo3(get, set)]
    #[serde(rename = "Country")]
    pub country: String,
    /// State where the city is located.
    #[pyo3(get, set)]
    #[serde(rename = "State")]
    pub state: String,
    /// City's unique identifier.
    ///
    /// It is generated by a specific Bicyle Network Analysis (BNA) run and
    /// should be assimilated to a version number (each run will generate a
    /// new identifier).
    #[pyo3(get, set)]
    pub uuid: String,
    /// City's population.
    #[pyo3(get, set)]
    pub population: u32,
    /// City rating.
    #[pyo3(get, set)]
    #[serde(rename = "city_ratings_total")]
    pub ratings: f64,
    /// Rounded city rating.
    #[pyo3(get, set)]
    #[serde(rename = "city_ratings_rounded")]
    pub ratings_rounded: u8,
}

/// Define Python compatible methods.
#[pymethods]
impl City21 {
    /// Create a new City.
    ///
    /// If the `state` is not specified (a lot of countries do not have states),
    /// the name of the country is used instead.
    #[new]
    pub fn new(
        name: &str,
        country: &str,
        uuid: &str,
        population: u32,
        ratings: f64,
        ratings_rounded: u8,
        state: Option<&str>,
    ) -> Self {
        City21 {
            name: name.into(),
            country: country.into(),
            state: if let Some(s) = state {
                s.into()
            } else {
                country.into()
            },
            uuid: uuid.into(),
            population,
            ratings,
            ratings_rounded,
        }
    }
}

impl ScorecardExt for ScoreCard21 {
    /// Return the full name of the city.
    ///
    /// The full name has the following format: `{COUNTRY}-{STATE}-{CITY_NAME}`.
    fn full_name(&self) -> String {
        format!(
            "{}-{}-{}",
            self.city.country, self.city.state, self.city.name
        )
    }

    /// Return the URL of the specified dataset.
    fn url(&self, dataset: &Dataset) -> Result<Url, Error> {
        let mut dataset_url: String = String::new();
        if *dataset == Dataset::DataDictionary {
            dataset_url.push_str(PFB_S3_PUBLIC_DOCUMENTS);
        } else {
            dataset_url.push_str(PFB_S3_STORAGE_BASE_URL);
            dataset_url.push('/');
            dataset_url.push_str(&self.city.uuid);
        }
        dataset_url.push('/');
        dataset_url.push_str(&dataset.to_string());
        dataset_url.push('.');
        dataset_url.push_str(&dataset.extension());
        Ok(Url::parse(&dataset_url)?)
    }
}

impl CsvExt for City21 {}

/// Represent the results from the community survey.
#[pyclass]
#[derive(Debug, Deserialize, Clone)]
pub struct CommunitySurvey21 {
    /// Perception of the quality of the bicycle network in the city.
    #[pyo3(get, set)]
    #[serde(rename = "Community Survey - Network")]
    pub network: f64,
    /// Perceptions of acceleration and awareness of bike events and facilities in an area.
    #[pyo3(get, set)]
    #[serde(rename = "Community Survey - Awareness")]
    pub awareness: f64,
    /// Perceptions of safety riding a bike .
    #[pyo3(get, set)]
    #[serde(rename = "Community Survey - Safety")]
    pub safety: f64,
    /// Measure how often respondents engage in different types of riding.
    #[pyo3(get, set)]
    #[serde(rename = "Community Survey - Ridership")]
    pub ridership: f64,
    /// Overall community survey score.
    #[pyo3(get, set)]
    #[serde(rename = "Community Score - Total")]
    pub total: f64,
    /// Overall community survey rounded score.
    #[pyo3(get, set)]
    #[serde(rename = "Community Score - Total, Rounded")]
    pub total_rounded: u32,
    /// Number of responses to the survey.
    #[pyo3(get, set)]
    #[serde(rename = "Community Survey - Responses")]
    pub responses: u32,
}

/// Represent the results from the BNA.
#[derive(Debug, Deserialize, Clone)]
#[pyclass]
pub struct BNA21 {
    /// How well people can reach other people by bike.
    #[pyo3(get, set)]
    #[serde(rename = "BNA - neighborhoods")]
    pub neighborhoods: f64,
    /// How well people can reach employment and educational opportunities by bike.
    #[pyo3(get, set)]
    #[serde(rename = "BNA - opportunity")]
    pub opportunity: f64,
    /// How well people can reach Core Services by bike.
    #[pyo3(get, set)]
    #[serde(rename = "BNA - essential_services")]
    #[serde(deserialize_with = "csv::invalid_option")]
    pub essential_services: Option<f64>,
    /// How well people can reach retail shopping opportunities by bike.
    #[pyo3(get, set)]
    #[serde(rename = "BNA - retail")]
    pub retail: f64,
    /// How well people can reach recreation opportunities by bike.
    #[pyo3(get, set)]
    #[serde(rename = "BNA - recreation")]
    #[serde(deserialize_with = "csv::invalid_option")]
    pub recreation: Option<f64>,
    /// How well people can reach major transit hubs by bike.
    #[pyo3(get, set)]
    #[serde(rename = "BNA - transit")]
    pub transit: f64,
    /// How well the bike network gets people to the places they want to go.
    #[pyo3(get, set)]
    #[serde(rename = "BNA - overall_score")]
    pub overall_score: f64,
}

/// Represent a city bike infrastructure.
#[pyclass]
#[derive(Debug, Deserialize, Clone)]
pub struct Infrastructure21 {
    /// Miles of low stress infrstructure.
    #[pyo3(get, set)]
    #[serde(rename = "total_low_stress_miles")]
    #[serde(deserialize_with = "csv::invalid_option")]
    pub low_stress_miles: Option<f64>,
    /// Miles of high stress infrastructure.
    #[pyo3(get, set)]
    #[serde(rename = "total_high_stress_miles")]
    #[serde(deserialize_with = "csv::invalid_option")]
    pub high_stress_miles: Option<f64>,
}

/// Represent a city scorecard.
#[pyclass]
#[derive(Debug, Deserialize, Clone)]
pub struct ScoreCard21 {
    /// City details.
    #[pyo3(get, set)]
    #[serde(flatten)]
    pub city: City21,
    /// Community survey results.
    #[pyo3(get, set)]
    #[serde(flatten)]
    pub community_survey: CommunitySurvey21,
    /// BNA results.
    #[pyo3(get, set)]
    #[serde(flatten)]
    pub bna: BNA21,
    /// Infrastructure details.
    #[pyo3(get, set)]
    #[serde(flatten)]
    pub infrastructure: Infrastructure21,
}

impl CsvExt for ScoreCard21 {}

/// Define Python compatible methods.
#[pymethods]
impl ScoreCard21 {
    /// Python wrapper for the [`ScoreCard::from_csv`] method.
    #[staticmethod]
    pub fn load_csv(path: &str) -> PyResult<Vec<ScoreCard21>> {
        Ok(ScoreCard21::from_csv(path)?)
    }
}
